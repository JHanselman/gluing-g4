v1 := Vector([1/3, 1/4, 1/5]);
v2 := Vector([-7/5, 11/10, 6]);
w1 := 1/5*v1 - 2*v2;
w2 := -3*v1 + (1/2)*v2;
//M1 := Matrix([Eltseq(v1), Eltseq(v2), [1,2,3]]);
//M2 := Matrix([Eltseq(w1), Eltseq(w2), [5,6,7]]);
M1 := Matrix([Eltseq(v1), Eltseq(v2)]);
M2 := Matrix([Eltseq(w1), Eltseq(w2)]);
M := VerticalJoin(M2,M1);
K := Kernel(M);
K;
M := ChangeRing(M,RR);
K := NumericalKernel(M);
K;
EchelonForm(K);

/*
AttachSpec("spec");
load "../examples/genus4/galois-stable.m";
K;
mats := Values(PPV_C_alphas);
V := VerticalJoin(mats[1], mats[2]);
qs;
PPV_C_alphas := AssociativeArray();
for alpha in char_pairs do
  PPV_C_alphas[alpha] := Matrix(56, 10, [Coefficients(el) : el in qs[alpha]]);
end for;
mats := Values(PPV_C_alphas);
V := VerticalJoin(mats[1], mats[2]);
Nrows(V), Ncols(V);
K := NumericalKernel(V);
K;
Nrows(K), Ncols(K);
Submatrix;
K_A := Submatrix(K,1,1,56,102);
K_B := Submatrix(K,1,57,56,102);
K_A := Submatrix(K,1,1,102,56);
Nrows(K), Ncols(K);
K_B := Submatrix(K,1,57,102,56);
Nrows(A);
K_A*mats[1];
NumericalRank($1);
inter := K_A*mats[1];
R, Q := RQDecomposition(inter);
Nrows(M), Ncols(M) where M := R;
[ComplexField(5)!Abs(elt) : elt in Diagonal(R)]
;
Precision(BaseRing(R));
image := NumericalImage(inter);
R;
Nrows(M), Ncols(M) where M := R;
ChangeRing(ComplexField(5), R);
ChangeRing(R,ComplexField(5));
Diagonal(ChangeRing(R,ComplexField(5)));
Clow := ComplexField(5);
[Clow!Max([Abs(elt) : elt in col]) : col in Rows(Transpose(R))];
[Clow!Max([Abs(elt) : elt in Eltseq(col)]) : col in Rows(Transpose(R))];
R, Q := RQDecomposition(Transpose(inter));
Nrows(M), Ncols(M) where M := R;
Nrows(M), Ncols(M) where M := Q;
[Clow!Max([Abs(elt) : elt in col]) : col in Rows(Transpose(R))];
[Clow!Max([Abs(elt) : elt in Eltseq(col)]) : col in Rows(Transpose(R))];
Submatrix;
RowSpanInter := Submatrix(R, 1, Ncols(R) - r, Nrows(R), r)*Q where r:=4;
Nrows(M), Ncols(M) where M := Q;
Nrows(M), Ncols(M) where M := R;
Nrows(M), Ncols(M) where M := R;
Nrows(M), Ncols(M) where M := Q;
ChangeRing(R,ComplexField(5));
RowSpanInter := Submatrix(R, 1, Ncols(R) - r, Nrows(R), r)*Submatrix(Q, Nrows(Q) -r, 1, r, Ncols(Q)) where r:=4;
NumericalRank(RowSpanInter);
foo, _ := RQDecomposition(RowSpanInter);
[Clow!Max([Abs(elt) : elt in Eltseq(col)]) : col in Rows(Transpose(foo))];
Nrows(M), Ncols(M) where M := RowSpanInter;
Nrows(M), Ncols(M) where M := Q;
R, Q := RQDecomposition(inter);
Nrows(M), Ncols(M) where M := Q;
Nrows(M), Ncols(M) where M := R;
basics := Submatrix(R, 1, Ncols(R) - r, Nrows(R), r)*Submatrix(Q, Nrows(Q) -r, 1, r, Ncols(Q)) where r:=4;
Nrows(M), Ncols(M) where M := basics;
[Clow!Max([Abs(elt) : elt in Eltseq(col)]) : col in Rows(Transpose(basics - inter))];
R, Q := RQDecomposition(inter);
basics := Submatrix(R, 1, Ncols(R) - r, Nrows(R), r)*Submatrix(Q, Nrows(Q) -r, 1, r, Ncols(Q)) where r:=4;
[Clow!Max([Abs(elt) : elt in Eltseq(col)]) : col in Rows(Transpose(R))];
[Clow!Max([Abs(elt) : elt in Eltseq(col)]) : col in Rows(Transpose(M))] where M := Submatrix(R, 1, Ncols(R) - r, Nrows(R), r) where r := 4; 
basics := Submatrix(R, 1, Ncols(R)+1 - r, Nrows(R), r)*Submatrix(Q, Nrows(Q)+1 -r, 1, r, Ncols(Q)) where r:=4;
[Clow!Max([Abs(elt) : elt in Eltseq(col)]) : col in Rows(Transpose(M))] where M := basics;
[Clow!Max([Abs(elt) : elt in Eltseq(col)]) : col in Rows(Transpose(M))] where M := basics - inter;
RowSpanInter := Submatrix(Q, Nrows(Q)+1 -r, 1, r, Ncols(Q)) where r:=4;
*/
